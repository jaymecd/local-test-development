name: proxy

networks:
  proxy:
    name: proxy  # globally unique for import

volumes:
  proxy_certs:
    name: proxy_certs  # globally unique for import

services:

  mkcert:  # one time job
    build:
      context: ./services/mkcert
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    volumes:
      - proxy_certs:/certs:rw
      - ./certs:/certs_ca:rw
    environment:
      TLS_PATH_CA: /certs_ca
      TLS_PATH_CERTS: /certs
      TLS_SANS_COMMON: local.test *.local.test examples.test *.examples.test my.test *.my.test
      TLS_SANS_EXTRA: ${TLS_SANS_EXTRA:-}

  dnsmasq:
    build:
      context: ./services/dnsmasq
    restart: unless-stopped
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    ports:
      - ${DOCKER_DEFAULT_IP:-172.17.0.1}:53:53/udp
      - ${DOCKER_DEFAULT_IP:-172.17.0.1}:53:53/tcp
    command:
      - --filter-AAAA
      - --address=/.test/${DOCKER_DEFAULT_IP:-172.17.0.1}
      - '--address=/.test/::'  # silence IPv6 with loopback

  traefik:
    build:
      context: ./services/traefik
      args:
        TRAEFIK_VERSION: ${TRAEFIK_VERSION:-v3.5.2}
    restart: unless-stopped
    depends_on:
      mkcert:
        condition: service_completed_successfully
      dnsmasq:
        condition: service_healthy
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    ports:
      # NOTE: need manually update on entrypoint updates or using compose.override.yaml
      - ${DOCKER_DEFAULT_IP:-172.17.0.1}:80:80/tcp
      - ${DOCKER_DEFAULT_IP:-172.17.0.1}:443:443/tcp
    volumes:
      - proxy_certs:/certs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TRAEFIK_LOG_LEVEL: ${TRAEFIK_LOG_LEVEL:-}
    labels:
      traefik.enable: true
      # local_traefik
      traefik.http.routers.local_traefik.service: api@internal  # bind to traefik API
      traefik.http.routers.local_traefik.rule: Host(`traefik.local.test`)
      traefik.http.services.local_traefik.loadbalancer.server.port: 80

  catchall:
    build:
      context: ./services/catchall
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_healthy
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    labels:
      traefik.enable: true
      # local_homepage
      traefik.http.routers.local_homepage.service: local_homepage
      traefik.http.routers.local_homepage.rule: Host(`local.test`) || Path(`/favicon.ico`)
      traefik.http.routers.local_homepage.middlewares: local_homepage
      traefik.http.services.local_homepage.loadbalancer.server.port: 80
      traefik.http.middlewares.local_homepage.addprefix.prefix: /homepage
      # local_catch_undefined
      traefik.http.routers.local_catch_undefined.service: local_catch_undefined
      traefik.http.routers.local_catch_undefined.rule: Host(`local.test`) || Path(`/`)
      traefik.http.routers.local_catch_undefined.priority: 1  # execute last
      traefik.http.routers.local_catch_undefined.middlewares: local_catch_undefined
      traefik.http.services.local_catch_undefined.loadbalancer.server.port: 80
      traefik.http.middlewares.local_catch_undefined.errors.status: 404
      traefik.http.middlewares.local_catch_undefined.errors.service: local_catch_undefined
      traefik.http.middlewares.local_catch_undefined.errors.query: /404/undefined.html

  portainer:
    build:
      context: ./services/portainer
      args:
        PORTAINER_VERSION: ${PORTAINER_VERSION:-2.33.1}
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_healthy
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    command:
      - --host=unix:///var/run/docker.sock
    environment:
      ADMIN_PASS: admin
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: true
      # local_portainer
      traefik.http.routers.local_portainer.service: local_portainer
      traefik.http.routers.local_portainer.rule: Host(`portainer.local.test`)
      traefik.http.services.local_portainer.loadbalancer.server.port: 9000

  whoami:
    image: traefik/whoami:v1.10.3
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_healthy
    security_opt:
      - no-new-privileges=true
    networks:
      proxy:
    scale: 2
    command:
      - --verbose
    labels:
      traefik.enable: true
      # local_whoami
      traefik.http.routers.local_whoami.service: local_whoami
      traefik.http.routers.local_whoami.rule: Host(`whoami.local.test`) && !Path(`/favicon.ico`)
      traefik.http.services.local_whoami.loadbalancer.server.port: 80
